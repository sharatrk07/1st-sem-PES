{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <stdlib.h>\
#define SIZE 10\
\
struct Node \{\
    int key, data;\
    struct Node* next;\
\};\
\
struct HashTable \{\
    struct Node* array[SIZE];\
\};\
\
struct Node* createNode(int key, int data) \{\
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\
    newNode->key = key;\
    newNode->data = data;\
    newNode->next = NULL;\
    return newNode;\
\}\
\
struct HashTable* createHashTable() \{\
    struct HashTable* hashTable = (struct HashTable*)malloc(sizeof(struct HashTable));\
    for (int i = 0; i < SIZE; ++i)\
        hashTable->array[i] = NULL;\
    return hashTable;\
\}\
\
int hash(int key) \{\
    return key % SIZE;\
\}\
\
void insert(struct HashTable* hashTable, int key, int data) \{\
    int index = hash(key);\
    struct Node* newNode = createNode(key, data);\
    if (hashTable->array[index] == NULL) \{\
        hashTable->array[index] = newNode;\
    \} else \{\
        int newIndex = (index + 1) % SIZE;\
        while (newIndex != index && hashTable->array[newIndex] != NULL) \{\
            newIndex = (newIndex + 1) % SIZE;\
        \}\
        if (hashTable->array[newIndex] == NULL) \{\
            hashTable->array[newIndex] = newNode;\
        \} else \{\
            printf("Hash table is full!\\n");\
            free(newNode);\
        \}\
    \}\
\}\
\
void display(struct HashTable* hashTable) \{\
    printf("Hash Table:\\n");\
    for (int i = 0; i < SIZE; ++i) \{\
        printf("Index %d: ", i);\
        struct Node* temp = hashTable->array[i];\
        while (temp != NULL) \{\
            printf("(%d, %d) ", temp->key, temp->data);\
            temp = temp->next;\
        \}\
        printf("\\n");\
    \}\
\}\
\
int main() \{\
    struct HashTable* hashTable = createHashTable();\
\
    insert(hashTable, 1, 10);\
    insert(hashTable, 2, 20);\
    insert(hashTable, 3, 30);\
    insert(hashTable, 4, 40);\
    insert(hashTable, 5, 50);\
    insert(hashTable, 6, 60);\
    insert(hashTable, 7, 70);\
    insert(hashTable, 8, 80);\
    insert(hashTable, 9, 90);\
    insert(hashTable, 10, 100);\
    insert(hashTable, 11, 110);\
    \
    display(hashTable);\
    return 0;\
\}}